1. What happens when you initialize a repository? Why do you need to do it?
It creates a hidden directory ".git" inside our current directory. It is this hidden
directory that makes a directory repository. It will contain all the data about 
all the commits we will make and stuff like that.



2. How is the staging area different from the working directory and the repository? What v
alue do you think it offers?
Working directory is the directory where we created a repository using "git init". It
contains all the files that we have created. The repository when created is initially 
empty. We then in the future add commits to the repository which have the versions of
certain files. The staging area is and intermediate area between the working directory
and the repository. It allows us to add one logical change per commit. This means that
we do not need to commit changes to all the files in the repository. We can choose 
which files do we want to commit.


3. How can you use the staging area to make sure you have one commit per logical change?
Before commiting we can run the command "git diff --staged" and check the difference
between the files in staging area and the most recent commit. Now we can see the result
and make sure that we are adding only one logical change in this commit.



4. What are some situations when branches would be helpful in keeping your history 
organized? How would branches help?
This can come handy when we want to add a new experimental feature but its not just
yet part of our main project. So we can create a branch and work on it on a separate
branch. And whenever I want to get to my main project I can easily do so by checking
out to the master branch.



5. How do the diagrams help you visualize the branch structure?
It helps in determining reachability, i.e., if we are on a particular commit
which are the commits that we can get to from there. It also helps us in 
finding any unreachable commits.


6. What is the result of merging two branches together? Why do we represent it in the 
diagram the way we do?
When we merge two branches we make a new commit and all the previous commits of both
branches are reachable from this new commit. The name of this branch is decided by
which branch we are checked out to while doing the merge. 


